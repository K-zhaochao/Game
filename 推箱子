#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdbool.h>
#include<windows.h>
#include<stdlib.h>
#include<conio.h>
#include<time.h> 



#define SPACE 0
#define WALL 1
#define PLAYER1 2
#define BOX 3
#define HOLE 4
#define GOAL 7
#define OKHOLE 8
#define boxANDhole 9
#define PLAYER2 14
#define jia 6
#define bian 5

int level1 = 0;
int level2 = 0;

int px, py;//玩家坐标

void gotoXY(int x, int y) {// 移动光标到指定位置
    COORD c;
    c.X = x - 1;
    c.Y = y - 1;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), c);
}


void setPrintColor(int color) {// 设置打印颜色
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
}

void clear(int x, int y, int w, int h)
{
    for (int i = 0; i < h; i++) {
        gotoXY(x, y + i);
        for (int j = 0; j < w; j++) putchar(' ');
    }
}
// -------------------- 数据设计 --------------------

int map[15][15];

// 游戏默认从第一关开始游戏，在玩家进入第一关后，将mapData[关卡]的值，赋给map
int mapData1[4][15][15] =//单人模式的地图
{
  {
   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
   { 0,0,0,0,0,1,1,1,1,1,0,0,0,0,0 },
   { 0,0,0,0,0,1,7,0,7,1,0,0,0,0,0 },
   { 0,0,0,0,0,1,0,3,0,1,0,0,0,0,0 },
   { 0,0,0,0,0,1,2,3,0,1,0,0,0,0,0 },
   { 0,0,0,0,0,1,0,3,0,1,0,0,0,0,0 },
   { 0,0,0,0,0,1,0,3,0,1,0,0,0,0,0 },
   { 0,0,0,0,0,1,7,0,7,1,0,0,0,0,0 },
   { 0,0,0,0,0,1,1,1,1,1,0,0,0,0,0 },
   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
  },

  {
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,0,0,0,0,1,1,1,1,0,0,0,0,0,0 },
    { 0,0,0,0,0,1,7,0,1,1,0,0,0,0,0 },
    { 0,0,0,0,1,1,3,2,0,1,0,0,0,0,0 },
    { 0,0,0,0,1,0,3,3,0,1,0,0,0,0,0 },
    { 0,0,0,0,1,0,7,3,0,1,0,0,0,0,0 },
    { 0,0,0,0,1,0,7,0,0,1,0,0,0,0,0 },
    { 0,0,0,0,1,1,1,1,1,1,0,0,0,0,0 },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
  },

  {
    { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
    { 1,1,0,0,4,0,0,0,0,4,0,0,3,0,1 },
    { 1,3,3,0,1,1,1,1,1,1,0,0,3,0,1 },
    { 1,0,3,0,1,0,0,0,0,1,0,0,0,0,1 },
    { 1,1,4,1,1,0,3,3,3,1,1,1,4,1,1 },
    { 1,1,3,1,1,0,0,0,0,0,0,0,0,0,1 },
    { 1,1,0,1,1,1,1,1,1,1,1,0,0,0,1 },
    { 1,1,0,1,2,3,4,0,0,0,3,0,0,0,1 },
    { 1,1,0,1,1,1,1,1,1,1,1,0,0,0,1 },
    { 1,1,0,1,1,0,0,0,4,0,0,0,0,0,1 },
    { 1,1,0,1,1,0,1,1,1,0,0,0,0,0,1 },
    { 1,0,0,1,1,0,1,0,1,0,0,0,0,0,1 },
    { 1,0,0,0,0,0,1,7,4,0,0,0,0,0,1 },
    { 1,0,0,0,1,7,1,0,1,0,0,0,0,0,1 },
    { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 }
  }
};

int mapData2[4][15][15] =//双人模式的地图
{
  {
   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
   { 0,1,1,1,1,1,1,1,1,1,1,1,0,0,0 },
   { 0,1,1,7,0,0,0,7,0,0,0,1,0,0,0 },
   { 0,1,0,3,0,0,0,0,0,0,0,1,0,0,0 },
   { 0,1,0,3,0,1,1,3,1,0,14,1,0,0,0 },
   { 0,1,0,3,3,1,1,0,1,0,0,1,0,0,0 },
   { 0,1,2,3,0,1,1,0,1,0,0,1,0,0,0 },
   { 0,1,0,3,0,1,1,0,1,0,0,1,0,0,0 },
   { 0,1,0,3,0,1,1,0,1,0,0,1,0,0,0 },
   { 0,1,0,7,0,1,1,7,1,0,0,1,0,0,0 },
   { 0,1,1,1,1,1,1,1,1,1,1,1,0,0,0 },
   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
  },

  {
   { 0,0,0,0,1,0,0,0,0,0,1,0,0,0,0 },
   { 0,0,0,1,2,1,0,0,0,1,0,1,0,0,0 },
   { 0,0,1,0,3,0,1,0,1,0,0,0,1,0,0 },
   { 0,1,0,0,0,0,0,1,0,0,0,3,0,1,0 },
   { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,1 },
   { 1,1,1,1,4,1,1,1,1,1,1,4,1,1,1 },
   { 1,0,0,0,0,1,1,1,1,0,0,0,0,14,1 },
   { 1,0,0,3,0,1,6,5,3,4,0,3,0,0,1 },
   { 0,1,0,0,0,1,1,1,1,0,0,0,0,1,0 },
   { 0,0,1,0,0,0,4,0,4,0,0,0,1,0,0 },
   { 0,0,0,1,0,0,4,0,4,0,0,1,0,0,0 },
   { 0,0,0,0,1,0,4,0,4,0,1,0,0,0,0 },
   { 0,0,0,0,0,1,1,0,1,1,0,0,0,0,0 },
   { 0,0,0,0,0,0,1,7,1,0,0,0,0,0,0 },
   { 0,0,0,0,0,0,0,1,0,0,0,0,0,0,0 }
  },

  {
   { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
   { 1,2,1,0,0,0,0,0,0,0,0,0,1,7,1 },
   { 1,0,0,0,0,1,1,1,0,0,3,0,0,0,1 },
   { 1,0,1,1,1,1,1,1,0,1,1,1,1,0,1 },
   { 1,0,1,0,0,0,3,0,0,1,0,0,3,0,1 },
   { 1,0,1,0,1,1,1,1,0,0,3,0,0,0,1 },
   { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,1 },
   { 1,0,3,1,1,1,1,1,1,4,4,1,1,0,1 },
   { 1,0,0,1,0,0,7,1,0,0,0,7,1,0,1 },
   { 1,0,0,1,4,4,1,1,1,1,1,1,1,0,1 },
   { 1,0,0,0,0,0,0,3,0,0,0,0,0,0,1 },
   { 1,0,1,0,0,0,1,1,1,1,1,1,1,0,1 },
   { 1,5,1,1,0,0,0,0,0,0,3,0,1,0,1 },
   { 1,6,5,0,0,0,0,0,0,0,0,0,0,14,1 },
   { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 }
  }
};


// -------------------- 数据设计 --------------------


// -------------------- service --------------------

void loadLevel1(int level);
void loadLevel2(int level);

void displayMap();

int isWin();

int move1(char input);
int move2(char input);

// -------------------- service --------------------


// -------------------- view ---------------------

void menuView();

void gameView1(int level);
void gameView2(int level);

void selectGameMode();

void winView1();
void winView2();

void settingsView();

void gamePlay_description();

void creditsView();


void pauseMenu1();
void pauseMenu2();

void allover1();
void allover2();

int bianhua();

// -------------------- view --------------------

int main()
{
    menuView();
    return 0;
}


void loadLevel1(int level)
{
    if (level >= 0 && level < 4)
    {
        for (int i = 0; i < 15; ++i)
        {
            for (int j = 0; j < 15; ++j)
            {
                if (mapData1[level][i][j] == 1)
                {
                    px = i; py = j;
                }
                map[i][j] = mapData1[level][i][j];
            }
        }
    }
}


void loadLevel2(int level)
{
    if (level >= 0 && level < 4)
    {
        for (int i = 0; i < 15; ++i)
        {
            for (int j = 0; j < 15; ++j)
            {
                if (mapData2[level][i][j] == 1)
                {
                    px = i; py = j;
                }
                map[i][j] = mapData2[level][i][j];
            }
        }
    }
}


int bianhua()
{
    int p = 0;
    //如果玩家将箱子推进了机关，就将假的目的地变成空地
    if (level2 == 1)
    {
        for (int i = 0; i < 15; i++)
        {
            for (int j = 0; j < 15; j++)
            {
                if (map[i][j] == bian)
                {
                    return 1;
                }
            }
        }

        return 0;
    }

    if (level2 == 2)
    {
        for (int i = 0; i < 15; i++)
        {
            for (int j = 0; j < 15; j++)
            {
                if (map[i][j] == bian)
                {
                    p++;
                }
            }
        }

        if (p == 2)
        {
            return 1;
        }

        else if (p == 1 || p == 0)
        {
            return 0;
        }

    }

    return 0;
}


void displayMap()
{
    gotoXY(3, 2);
    printf("按esc键打开 “ 菜 单 ”");

    for (int i = 0; i < 15; i++)
    {
        gotoXY(47, 7 + i);
        for (int j = 0; j < 15; j++)
        {
            if (map[i][j] == SPACE)
            {
                printf("  ");
            }

            else if (map[i][j] == PLAYER1)
            {
                printf("♂ ");
            }

            else if (map[i][j] == PLAYER2)
            {
                printf("♀ ");
            }

            else if (map[i][j] == BOX)
            {
                printf("o ");
            }

            else if (map[i][j] == WALL)
            {
                printf("▅ ");
            }

            else if (map[i][j] == GOAL)
            {
                printf("× ");
            }

            else if (map[i][j] == boxANDhole)
            {
                printf("※ ");
            }

            else if (map[i][j] == HOLE)
            {
                printf("# ");
            }

            else if (map[i][j] == OKHOLE)
            {
                printf("  ");
            }

            else if (map[i][j] == bian)
            {
                printf("  ");
            }

            else if (bianhua() == 1)
            {
                for (int i = 0; i < 15; i++)
                {
                    for (int j = 0; j < 15; j++)
                    {
                        if (map[i][j] == jia)
                        {
                            printf("× ");
                        }
                    }
                }
            }

            else if (bianhua() == 0)
            {
                for (int i = 0; i < 15; i++)
                {
                    for (int j = 0; j < 15; j++)
                    {
                        if (map[i][j] == jia)
                        {
                            map[i][j] = SPACE;
                            printf("  ");
                        }
                    }
                }
            }

        }
        printf("\n");
    }
}


void gameView1(int level) {
    loadLevel1(level1);//初始化游戏关卡数据

    bool isRunning = true;      // 定义游戏运行状态变量
    bool isMenuActive = false;  // 定义是否处于菜单激活状态
    bool isPaused = false;      //定义暂停状态变量

    while (isRunning)
    {
        displayMap();
        char input = getch();
        if (input == 27)
        {
            system("cls");
            pauseMenu1();
            break;
        }

        switch (input)
        {
        case 'w': case 's': case 'a': case 'd':
            move1(input);
            break;
        case 'W': case 'S': case 'A': case 'D':
            move1(input);
            break;
        case 72: case 80: case 75: case 77:
            move1(input);
            break;
        }

        if (isWin() == 1)
        {
            if (level1 == 2)
            {
                system("cls");
                level1 = 0;
                allover1();
                break;
            }
            else
            {
                system("cls");
                winView1();
                isMenuActive = true;
            }
        }
    }
}


void gameView2(int level)
{
    loadLevel2(level2);//初始化游戏关卡数据

    bool isRunning = true;      // 定义游戏运行状态变量
    bool isMenuActive = false;  // 定义是否处于菜单激活状态
    bool isPaused = false;      //定义暂停状态变量

    while (isRunning)
    {
        displayMap();
        char input = getch();
        if (input == 27)
        {
            system("cls");
            pauseMenu2();
            break;
        }

        switch (input)
        {
        case 'w': case 's': case 'a': case 'd':
            move2(input);
            break;
        case 'W': case 'S': case 'A': case 'D':
            move2(input);
            break;
        case 72: case 80: case 75: case 77:
            move2(input);
            break;
        }

        if (isWin() == 1)
        {
            if (level2 == 2)
            {
                system("cls");
                level2 = 0;
                allover2();
                break;
            }
            else
            {
                system("cls");
                winView2();
                isMenuActive = true;
            }
        }
    }
}


void menuView()
{

    int userChoose = 0;
    system("cls");
    while (1)
    {
        gotoXY(47, 2);
        printf("┌─────────────────────────────┐\n");
        gotoXY(47, 3);
        printf("│                             │\n");
        gotoXY(47, 4);
        printf("│    推       箱       子     │\n");
        gotoXY(47, 5);
        printf("│                             │\n");
        gotoXY(47, 6);
        printf("└─────────────────────────────┘\n");

        if (userChoose == 0) setPrintColor(0x6f);
        gotoXY(56, 8);
        printf("游戏模式选择");
        if (userChoose == 0) setPrintColor(0x0f);
        if (userChoose == 1) setPrintColor(0x6f);
        gotoXY(58, 10);
        printf("玩法说明");
        if (userChoose == 1) setPrintColor(0x0f);
        if (userChoose == 2) setPrintColor(0x6f);
        gotoXY(60, 12);
        printf("设置");
        if (userChoose == 2) setPrintColor(0x0f);
        if (userChoose == 3) setPrintColor(0x6f);
        gotoXY(58, 14);
        printf("退出游戏");
        if (userChoose == 3) setPrintColor(0x0f);
        if (userChoose == 4) setPrintColor(0x6f);
        gotoXY(56, 16);
        printf("制作人员名单");
        if (userChoose == 4) setPrintColor(0x0f);
        if (userChoose == 5) setPrintColor(0x6f);


        char input = _getch();

        switch (input)
        {
        case 'w':
        case 'W':
        case 72:
            userChoose -= 1;
            if (userChoose == -1) userChoose = 4;
            break;
        case 's':
        case 'S':
        case 80:
            userChoose = (userChoose + 1) % 5;
            break;
        case '\r':
            switch (userChoose)
            {
            case 0:
                system("cls");
                selectGameMode();
                break;
            case 1:
                system("cls");
                gamePlay_description();
                break;
            case 2:
                system("cls");
                settingsView();
                break;
            case 3:
                system("cls");
                exit(0);
            case 4:
                system("cls");
                creditsView();
                break;
            }
            break;
        }
    }

}


void gamePlay_description()
{
    while (1)
    {
        gotoXY(60, 2);
        printf("游戏说明");
        gotoXY(26, 4);
        printf("游戏关卡界面中常见的主要交互活动 ：");
        gotoXY(30, 6);
        printf("“ 玩家与墙” “玩家与箱子” “玩家与坑” “玩家与特殊点位” “玩家与可操控障碍”\n");
        gotoXY(26, 8);
        printf("操作方法:");
        gotoXY(30, 10);
        printf("① 单人模式：");
        gotoXY(32, 12);
        printf("“ W S A D ”分别表示“ 上 下 左 右 ”");
        gotoXY(30, 14);
        printf("② 双人模式");
        gotoXY(31, 16);
        printf("玩 家 1：");
        gotoXY(32, 18);
        printf("“W S A D ”分别表示“ 上 下 左 右 ”");
        gotoXY(31, 20);
        printf("玩 家 2： ");
        gotoXY(32, 22);
        printf(" “↑ ↓ ← →”分别表示“ 上 下 左 右 ”");
        gotoXY(26, 24);
        printf("菜单（游戏界面中）: 按Esc");
        gotoXY(51, 26);
        printf("（按回车键可返回游戏首页）");

        if (_getch() == '\r')
        {
            system("cls");
            menuView();
            break;
        }

    }
}


//通过全部关卡
void allover1()
{
    system("cls");
    int userChoose = 0;
    while (1)
    {
        gotoXY(56, 3);
        printf("恭喜通过所以关卡！");

        gotoXY(54, 5);
        printf("┌──────────────────┐\n");
        gotoXY(54, 6);
        printf("│                  │\n");
        gotoXY(54, 7);
        printf("│     VICTORY!     │\n");
        gotoXY(54, 8);
        printf("│                  │\n");
        gotoXY(54, 9);
        printf("└──────────────────┘\n");

        // ----------------- 打印界面 -----------------

        if (userChoose == 0) setPrintColor(0x6f);
        gotoXY(58, 13);
        printf("返回游戏首页\n");
        if (userChoose == 0) setPrintColor(0x0f);
        if (userChoose == 1) setPrintColor(0x6f);
        gotoXY(60, 16);
        printf("退出游戏\n");
        if (userChoose == 1) setPrintColor(0x0f);

        // ----------------  接收用户输入  --------------

        char input = _getch();

        // -------------判断是方向上下还是回车------------

        switch (input)
        {
        case 'w':
        case 'W':
        case 72:
            userChoose -= 1;
            if (userChoose == -1) userChoose = 1;
            break;
        case 's':
        case 'S':
        case 80:
            userChoose = (userChoose + 1) % 2;
            break;
        case '\r':
            clear(3, 2, 80, 20);
            switch (userChoose)
            {
            case 0:
                system("cls");
                menuView();
                break;
            case 1:
                system("cls");
                exit(0);
                break;
            }
            clear(3, 2, 36, 20);
            break;
        }
    }
}


void allover2()
{
    system("cls");
    int userChoose = 0;
    while (1)
    {
        gotoXY(56, 3);
        printf("恭喜通过所以关卡！");

        gotoXY(54, 5);
        printf("┌──────────────────┐\n");
        gotoXY(54, 6);
        printf("│                  │\n");
        gotoXY(54, 7);
        printf("│     VICTORY!     │\n");
        gotoXY(54, 8);
        printf("│                  │\n");
        gotoXY(54, 9);
        printf("└──────────────────┘\n");

        // ----------------- 打印界面 -----------------

        if (userChoose == 0) setPrintColor(0x6f);
        gotoXY(58, 13);
        printf("返回游戏首页\n");
        if (userChoose == 0) setPrintColor(0x0f);
        if (userChoose == 1) setPrintColor(0x6f);
        gotoXY(60, 16);
        printf("退出游戏\n");
        if (userChoose == 1) setPrintColor(0x0f);

        // ----------------  接收用户输入  --------------

        char input = _getch();

        // -------------判断是方向上下还是回车------------

        switch (input)
        {
        case 'w':
        case 'W':
        case 72:
            userChoose -= 1;
            if (userChoose == -1) userChoose = 1;
            break;
        case 's':
        case 'S':
        case 80:
            userChoose = (userChoose + 1) % 2;
            break;
        case '\r':
            clear(3, 2, 80, 20);
            switch (userChoose)
            {
            case 0:
                system("cls");
                menuView();
                break;
            case 1:
                system("cls");
                exit(0);
                break;
            }
            clear(3, 2, 36, 20);
            break;
        }


    }
}


void winView1()
{
    int userChoose = 0;
    system("cls");
    while (1)
    {
        gotoXY(60, 3);
        printf("恭喜获胜！");

        gotoXY(54, 5);
        printf("┌──────────────────┐\n");
        gotoXY(54, 6);
        printf("│                  │\n");
        gotoXY(54, 7);
        printf("│     VICTORY!     │\n");
        gotoXY(54, 8);
        printf("│                  │\n");
        gotoXY(54, 9);
        printf("└──────────────────┘\n");

        // ----------------- 打印界面 -----------------

        if (userChoose == 0) setPrintColor(0x6f);
        gotoXY(59, 12);
        printf("进行下一关\n");
        if (userChoose == 0) setPrintColor(0x0f);
        if (userChoose == 1) setPrintColor(0x6f);
        gotoXY(58, 14);
        printf("返回游戏首页\n");
        if (userChoose == 1) setPrintColor(0x0f);
        if (userChoose == 2) setPrintColor(0x6f);
        gotoXY(60, 16);
        printf("退出游戏\n");
        if (userChoose == 2) setPrintColor(0x0f);

        // ---------------- 接收用户输入 --------------

        char input = _getch();

        // -------------判断是方向上下还是回车------------
        switch (input)
        {
        case 'w':
        case 'W':
        case 72:
            userChoose -= 1;
            if (userChoose == -1) userChoose = 2;
            break;
        case 's':
        case 'S':
        case 80:
            userChoose = (userChoose + 1) % 3;
            break;
        case '\r':
            clear(3, 2, 80, 20);
            switch (userChoose)
            {
            case 0:
                system("cls");
                level1++;
                gameView1(level1);
                break;
            case 1:
                system("cls");
                menuView();
                break;
            case 2:
                system("cls");
                exit(0);
                break;
            }
            clear(3, 2, 36, 20);
            break;
        }
    }
}


void winView2()
{
    int userChoose = 0;
    system("cls");
    while (1)
    {
        gotoXY(60, 3);
        printf("恭喜获胜！");

        gotoXY(54, 5);
        printf("┌──────────────────┐\n");
        gotoXY(54, 6);
        printf("│                  │\n");
        gotoXY(54, 7);
        printf("│     VICTORY!     │\n");
        gotoXY(54, 8);
        printf("│                  │\n");
        gotoXY(54, 9);
        printf("└──────────────────┘\n");

        // ----------------- 打印界面 -----------------

        if (userChoose == 0) setPrintColor(0x6f);
        gotoXY(59, 12);
        printf("进行下一关\n");
        if (userChoose == 0) setPrintColor(0x0f);
        if (userChoose == 1) setPrintColor(0x6f);
        gotoXY(58, 14);
        printf("返回游戏首页\n");
        if (userChoose == 1) setPrintColor(0x0f);
        if (userChoose == 2) setPrintColor(0x6f);
        gotoXY(60, 16);
        printf("退出游戏\n");
        if (userChoose == 2) setPrintColor(0x0f);

        // ---------------- 接收用户输入 --------------

        char input = _getch();

        // -------------判断是方向上下还是回车------------

        switch (input)
        {
        case 'w':
        case 'W':
        case 72:
            userChoose -= 1;
            if (userChoose == -1) userChoose = 2;
            break;
        case 's':
        case 'S':
        case 80:
            userChoose = (userChoose + 1) % 3;
            break;
        case '\r':
            clear(3, 2, 80, 20);
            switch (userChoose)
            {
            case 0:
                system("cls");
                level2++;
                gameView2(level2);
                break;
            case 1:
                system("cls");
                menuView();
                break;
            case 2:
                system("cls");
                exit(0);
                break;
            }
            clear(3, 2, 36, 20);
            break;
        }
    }
}


void creditsView()
{
    system("cls");
    int userChoose = 0;
    while (1)
    {
        system("cls");
        gotoXY(59, 2);
        printf("制作人员名单");
        gotoXY(59, 8);
        printf("敬请期待.....");
        gotoXY(52, 24);
        printf("（按回车键可返回游戏首页）");

        // -------------判断是方向上下还是回车------------

        if (_getch() == '\r')
        {
            system("cls");
            menuView();
            break;
        }
    }
}


void settingsView()
{
    system("cls");
    int userChoose = 0;
    while (1)
    {
        gotoXY(8, 1);
        printf("注：按回车键开关背景音乐");
        gotoXY(51, 3);
        printf("┌─────────────────────┐\n");
        gotoXY(51, 4);
        printf("│                     │\n");
        gotoXY(51, 5);
        printf("│     设 置 界 面     │\n");
        gotoXY(51, 6);
        printf("│                     │\n");
        gotoXY(51, 7);
        printf("└─────────────────────┘\n");

        if (userChoose == 0) setPrintColor(0x6f);
        gotoXY(56, 10);
        printf("敬请期待...");
        if (userChoose == 0) setPrintColor(0x0f);
        if (userChoose == 1) setPrintColor(0x6f);
        gotoXY(56, 13);
        printf("返回游戏首页");
        if (userChoose == 1) setPrintColor(0x0f);

        char input = _getch();

        switch (input)
        {
        case 'w':
        case 'W':
        case 72:
            userChoose -= 1;
            if (userChoose == -1) userChoose = 1;
            break;
        case 's':
        case'S':
        case 80:
            userChoose = (userChoose + 1) % 2;
            break;
        case '\r':
            switch (userChoose)
            {
            case 0:
                system("cls");
                break;
            case 1:
                system("cls");
                menuView();
                break;
            }
        }
    }
}


void pauseMenu1()
{
    int userChoose = 0; // 初始选择为0（第一个选项）  
    while (1)
    {
        // 打印暂停界面   
        gotoXY(51, 2);
        printf("┌─────────────────┐\n");
        gotoXY(51, 3);
        printf("│                 │\n");
        gotoXY(51, 4);
        printf("│     菜   单     │\n");
        gotoXY(51, 5);
        printf("│                 │\n");
        gotoXY(51, 6);
        printf("└─────────────────┘\n");

        // 打印选项并设置颜色  
        if (userChoose == 0) setPrintColor(0x6f);
        gotoXY(58, 9);
        printf("重 玩");

        if (userChoose == 0) setPrintColor(0x0f);
        if (userChoose == 1) setPrintColor(0x6f);

        gotoXY(54, 12);
        printf(" 返回游戏首页");

        if (userChoose == 1) setPrintColor(0x0f);
        if (userChoose == 2) setPrintColor(0x6f);

        char input = _getch(); // 读取用户输入 

        // 根据输入更新选择
        switch (input)
        {
        case 'w':
        case 'W':
        case 72:
            if (userChoose > 0)
            {
                userChoose--;
            }
            else
            {
                userChoose++;
            }
            break;
        case 's':
        case 'S':
        case 80:
            if (userChoose < 1)
            {
                userChoose++;
            }
            else
            {
                userChoose--;
            }
            break;
        case '\r':
            switch (userChoose)
            {
            case 0:
                system("cls");
                gameView1(level1);
                break;
            case 1:
                system("cls");
                menuView();
                break;
            case 2:
                break;
            }
        }
    }
}


void pauseMenu2()
{
    int userChoose = 0; // 初始选择为0（第一个选项）  
    while (1)
    {
        // 打印暂停界面   
        gotoXY(51, 2);
        printf("┌─────────────────┐\n");
        gotoXY(51, 3);
        printf("│                 │\n");
        gotoXY(51, 4);
        printf("│     菜   单     │\n");
        gotoXY(51, 5);
        printf("│                 │\n");
        gotoXY(51, 6);
        printf("└─────────────────┘\n");

        // 打印选项并设置颜色  
        if (userChoose == 0) setPrintColor(0x6f);
        gotoXY(58, 9);
        printf("重 玩");

        if (userChoose == 0) setPrintColor(0x0f);
        if (userChoose == 1) setPrintColor(0x6f);

        gotoXY(54, 12);
        printf(" 返回游戏首页");

        if (userChoose == 1) setPrintColor(0x0f);
        if (userChoose == 2) setPrintColor(0x6f);

        char input = _getch(); // 读取用户输入  

        // 根据输入更新选择
        switch (input)
        {
        case 'w':
        case 'W':
        case 72:
            if (userChoose > 0)
            {
                userChoose--;
            }
            else
            {
                userChoose++;
            }
            break;
        case 's':
        case 'S':
        case 80:
            if (userChoose < 1)
            {
                userChoose++;
            }
            else
            {
                userChoose--;
            }
            break;
        case '\r':
            switch (userChoose)
            {
            case 0:
                system("cls");
                gameView2(level2);
                break;
            case 1:
                system("cls");
                menuView();
                break;
            case 2:
                break;
            }
        }
    }
}


void selectGameMode()
{
    int userChoose = 0;
    system("cls");
    while (1)
    {
        ////----------------- 打印界面 ----------------
        gotoXY(41, 2);
        printf("┌─────────────────────────────────────────┐\n");
        gotoXY(41, 3);
        printf("│                                         │\n");
        gotoXY(41, 4);
        printf("│    模        式        选         择    │\n");
        gotoXY(41, 5);
        printf("│                                         │\n");
        gotoXY(41, 6);
        printf("└─────────────────────────────────────────┘\n");

        if (userChoose == 0) setPrintColor(0x6f);

        gotoXY(57, 8);
        printf("单人模式");

        if (userChoose == 0) setPrintColor(0x0f);
        if (userChoose == 1) setPrintColor(0x6f);

        gotoXY(57, 11);
        printf("双人模式");

        if (userChoose == 1) setPrintColor(0x0f);
        if (userChoose == 2) setPrintColor(0x6f);

        gotoXY(55, 14);
        printf("返回游戏首页");

        if (userChoose == 2) setPrintColor(0x0f);
        ////---------------- 接收用户输入 --------------
        char input = _getch();
        ////-------------判断是方向上下还是回车------------
        switch (input)
        {
        case 'w':
        case 'W':
        case 72:
            userChoose -= 1;
            if (userChoose == -1) userChoose = 2;
            break;

        case 's':
        case 'S':
        case 80:
            userChoose = (userChoose + 1) % 3;
            break;

        case '\r':
            clear(3, 2, 80, 20);
            switch (userChoose)
            {
            case 0:;
                system("cls");
                gameView1(level1);
                break;
            case 1:
                system("cls");
                gameView2(level2);
                break;
            case 2:
                menuView();
                break;
            }
            clear(3, 2, 36, 20);
            break;
        }
    }
}


// 玩家1 开始移动
int move1(char input)
{
    int x, y;//表示 玩家1 位置
    for (int i = 0; i < 15; i++)
    {
        for (int j = 0; j < 15; j++)
        {
            if (map[i][j] == PLAYER1)
            {
                x = i, y = j;
            }
        }
    }
    char playerInPut = input;
    while (1)
    {
        switch (playerInPut)
        {
            //向上
        case 'w':
        case 'W':
            //如果玩家前面是墙、坑、玩家可操控障碍物，玩家无法向前移动
            if (map[x - 1][y] == WALL || map[x - 1][y] == HOLE || map[x - 1][y] == GOAL)
            {
                return 0;
            }

            //如果玩家前面是空地
            else if (map[x - 1][y] == SPACE)
            {
                map[x - 1][y] = PLAYER1;//玩家移动
                map[x][y] = SPACE;//玩家原来的位置变为空地
                return 1;
            }

            //如果玩家前面是填好的坑
            else if (map[x - 1][y] == OKHOLE)
            {
                map[x - 1][y] = PLAYER1;
                map[x][y] = SPACE;
                return 1;
            }


            //如果玩家前面是箱子
            else if (map[x - 1][y] == BOX)
            {
                //如果箱子前面是墙、可操控障碍物、玩家可操控点位，那玩家就不移动
                if (map[x - 2][y] == WALL || map[x - 2][y] == BOX)
                {
                    return 0;
                }

                //如果箱子前面是坑
                else if (map[x - 2][y] == HOLE)
                {
                    map[x - 2][y] = OKHOLE;
                    map[x - 1][y] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果箱子前面是目的地
                else if (map[x - 2][y] == GOAL)
                {
                    map[x - 2][y] = boxANDhole;
                    map[x - 1][y] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果箱子的前面是空地
                else if (map[x - 2][y] == SPACE)
                {
                    map[x - 2][y] = BOX;
                    map[x - 1][y] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果箱子前面是填好了的坑
                else if (map[x - 2][y] == OKHOLE)
                {
                    map[x - 2][y] = BOX;
                    map[x - 1][y] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }
            }

            //向下
        case 's':
        case 'S':
            //如果玩家前面是墙、坑、玩家可操控障碍物，玩家无法向前移动
            if (map[x + 1][y] == WALL || map[x + 1][y] == HOLE || map[x + 1][y] == GOAL)
            {
                return 0;
            }

            //如果玩家前面是空地
            else if (map[x + 1][y] == SPACE)
            {
                map[x + 1][y] = PLAYER1;//玩家移动
                map[x][y] = SPACE;//玩家原来的位置变为空地
                return 1;
            }

            //如果玩家前面是填好的坑
            else if (map[x + 1][y] == OKHOLE)
            {
                map[x + 1][y] = PLAYER1;
                map[x][y] = SPACE;
                return 1;
            }

            //如果玩家前面是箱子
            else if (map[x + 1][y] == BOX)
            {

                //如果箱子前面是墙、可操控障碍物、玩家可操控点位，那玩家就不移动
                if (map[x + 2][y] == WALL || map[x + 2][y] == BOX)
                {
                    return 0;
                }

                //如果箱子前面是坑
                else if (map[x + 2][y] == HOLE)
                {
                    map[x + 2][y] = OKHOLE;
                    map[x + 1][y] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果箱子前面是目的地
                else if (map[x + 2][y] == GOAL)
                {
                    map[x + 2][y] = boxANDhole;
                    map[x + 1][y] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果箱子的前面是空地
                else if (map[x + 2][y] == SPACE)
                {
                    map[x + 2][y] = BOX;
                    map[x + 1][y] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果箱子前面是填好了的坑
                else if (map[x + 2][y] == OKHOLE)
                {
                    map[x + 2][y] = BOX;
                    map[x + 1][y] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }
            }

            //向左
        case 'a':
        case 'A':
            //如果玩家前面是墙、坑、玩家可操控障碍物，玩家无法向前移动
            if (map[x][y - 1] == WALL || map[x][y - 1] == HOLE || map[x][y - 1] == GOAL)
            {
                return 0;
            }

            //如果玩家前面是空地
            else if (map[x][y - 1] == SPACE)
            {
                map[x][y - 1] = PLAYER1;//玩家移动
                map[x][y] = SPACE;//玩家原来的位置变为空地
                return 1;
            }

            //如果玩家前面是填好的坑
            else if (map[x][y - 1] == OKHOLE)
            {
                map[x][y - 1] = PLAYER1;
                map[x][y] = SPACE;
                return 1;
            }

            //如果玩家前面是箱子
            else if (map[x][y - 1] == BOX)
            {

                //如果箱子前面是墙、可操控障碍物、玩家可操控点位，那玩家就不移动
                if (map[x][y - 2] == WALL || map[x][y - 2] == BOX)
                {
                    return 0;
                }

                //如果箱子前面是坑
                else if (map[x][y - 2] == HOLE)
                {
                    map[x][y - 2] = OKHOLE;
                    map[x][y - 1] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果箱子前面是目的地
                else if (map[x][y - 2] == GOAL)
                {
                    map[x][y - 2] = boxANDhole;
                    map[x][y - 1] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果箱子的前面是空地
                else if (map[x][y - 2] == SPACE)
                {
                    map[x][y - 2] = BOX;
                    map[x][y - 1] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果箱子前面是填好了的坑
                else if (map[x][y - 2] == OKHOLE)
                {
                    map[x][y - 2] = BOX;
                    map[x][y - 1] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }
            }

            //向右
        case 'd':
        case 'D':
            //如果玩家前面是墙、坑、玩家可操控障碍物，玩家无法向前移动
            if (map[x][y + 1] == WALL || map[x][y + 1] == HOLE || map[x][y + 1] == GOAL)
            {
                return 0;
            }

            //如果玩家前面是空地
            else if (map[x][y + 1] == SPACE)
            {
                map[x][y + 1] = PLAYER1;//玩家移动
                map[x][y] = SPACE;//玩家原来的位置变为空地
                return 1;
            }

            //如果玩家前面是填好的坑
            else if (map[x][y + 1] == OKHOLE)
            {
                map[x][y + 1] = PLAYER1;
                map[x][y] = SPACE;
                return 1;
            }

            //如果玩家前面是箱子
            else if (map[x][y + 1] == BOX)
            {
                //如果箱子前面是墙、可操控障碍物、玩家可操控点位，那玩家就不移动
                if (map[x][y + 2] == WALL || map[x][y + 2] == BOX)
                {
                    return 0;
                }

                //如果箱子前面是坑
                else if (map[x][y + 2] == HOLE)
                {
                    map[x][y + 2] = OKHOLE;
                    map[x][y + 1] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果箱子前面是目的地
                else if (map[x][y + 2] == GOAL)
                {
                    map[x][y + 2] = boxANDhole;
                    map[x][y + 1] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果箱子的前面是空地
                else if (map[x][y + 2] == SPACE)
                {
                    map[x][y + 2] = BOX;
                    map[x][y + 1] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果箱子前面是填好了的坑
                else if (map[x][y + 2] == OKHOLE)
                {
                    map[x][y + 2] = BOX;
                    map[x][y + 1] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }
            }
        }
        return 0;
    }
}


// 玩家1 和 玩家2 开始移动
int move2(char input)
{
    int x, y;//表示 玩家1 位置
    int q, w;//表示 玩家2 位置

    for (int i = 0; i < 15; i++)
    {
        for (int j = 0; j < 15; j++)
        {
            if (map[i][j] == PLAYER1)
            {
                x = i, y = j;
            }
            else if (map[i][j] == PLAYER2)
            {
                q = i, w = j;
            }
        }
    }

    char playerInPut = input;

    while (1) {
        if (input == 72 || input == 80 || input == 75 || input == 77)
        {
            switch (playerInPut)
            {
                // 玩家2 开始移动
                    //向上
            case 72:
                //如果玩家前面是墙、坑、玩家可操控障碍物，玩家无法向前移动
                if (map[q - 1][w] == WALL || map[q - 1][w] == HOLE || map[q - 1][w] == GOAL)
                {
                    return 0;
                }

                //如果玩家前面是空地
                else if (map[q - 1][w] == SPACE)
                {
                    map[q - 1][w] = PLAYER2;//玩家移动
                    map[q][w] = SPACE;//玩家原来的位置变为空地
                    return 1;
                }

                //如果玩家前面是填好的坑
                else if (map[q - 1][w] == OKHOLE)
                {
                    map[q - 1][w] = PLAYER2;
                    map[q][w] = SPACE;
                    return 1;
                }

                //如果玩家前面是机关
                else if (map[q - 1][w] == bian)
                {
                    map[q - 1][w] = PLAYER2;
                    map[q][w] = SPACE;
                    return 1;
                }

                //如果玩家前面是箱子
                else if (map[q - 1][w] == BOX)
                {
                    //如果箱子前面是墙、可操控障碍物、玩家可操控点位，那玩家就不移动
                    if (map[q - 2][w] == WALL || map[q - 2][w] == BOX)
                    {
                        return 0;
                    }

                    //如果箱子前面是坑
                    else if (map[q - 2][w] == HOLE)
                    {
                        map[q - 2][w] = OKHOLE;
                        map[q - 1][w] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是目的地
                    else if (map[q - 2][w] == GOAL)
                    {
                        map[q - 2][w] = boxANDhole;
                        map[q - 1][w] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                    //如果箱子的前面是空地
                    else if (map[q - 2][w] == SPACE)
                    {
                        map[q - 2][w] = BOX;
                        map[q - 1][w] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是填好了的坑
                    else if (map[q - 2][w] == OKHOLE)
                    {
                        map[q - 2][w] = BOX;
                        map[q - 1][w] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是机关
                    else if (map[q - 2][w] == bian)
                    {
                        map[q - 2][w] = SPACE;
                        map[q - 1][w] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }
                }

                //向下
            case 80:
                //如果玩家前面是墙、坑、玩家可操控障碍物，玩家无法向前移动
                if (map[q + 1][w] == WALL || map[q + 1][w] == HOLE || map[q + 1][w] == GOAL)
                {
                    return 0;
                }

                //如果玩家前面是空地
                else if (map[q + 1][w] == SPACE)
                {
                    map[q + 1][w] = PLAYER2;//玩家移动
                    map[q][w] = SPACE;//玩家原来的位置变为空地
                    return 1;

                }

                //如果玩家前面是填好的坑
                else if (map[q + 1][w] == OKHOLE)
                {
                    map[q + 1][w] = PLAYER2;
                    map[q][w] = SPACE;
                    return 1;
                }

                //如果玩家前面是机关
                else if (map[q + 1][w] == bian)
                {
                    map[q + 1][w] = PLAYER2;
                    map[q][w] = SPACE;
                    return 1;
                }


                //如果玩家前面是箱子
                else if (map[q + 1][w] == BOX)
                {

                    //如果箱子前面是墙、可操控障碍物、玩家可操控点位，那玩家就不移动
                    if (map[q + 2][w] == WALL || map[q + 2][w] == BOX)
                    {
                        return 0;
                    }

                    //如果箱子前面是坑
                    else if (map[q + 2][w] == HOLE)
                    {
                        map[q + 2][w] = OKHOLE;
                        map[q + 1][w] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是目的地
                    else if (map[q + 2][w] == GOAL)
                    {
                        map[q + 2][w] = boxANDhole;
                        map[q + 1][w] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                    //如果箱子的前面是空地
                    else if (map[q + 2][w] == SPACE)
                    {
                        map[q + 2][w] = BOX;
                        map[q + 1][w] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是填好了的坑
                    else if (map[q + 2][w] == OKHOLE)
                    {
                        map[q + 2][w] = BOX;
                        map[q + 1][w] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是机关
                    else if (map[q + 2][w] == bian)
                    {
                        map[q + 2][w] = SPACE;
                        map[q + 1][w] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                }

                //向左
            case 75:
                //如果玩家前面是墙、坑、玩家可操控障碍物，玩家无法向前移动
                if (map[q][w - 1] == WALL || map[q][w - 1] == HOLE || map[q][w - 1] == GOAL)
                {
                    return 0;
                }

                //如果玩家前面是空地
                else if (map[q][w - 1] == SPACE)
                {
                    map[q][w - 1] = PLAYER2;//玩家移动
                    map[q][w] = SPACE;//玩家原来的位置变为空地
                    return 1;
                }

                //如果玩家前面是填好的坑
                else if (map[q][w - 1] == OKHOLE)
                {
                    map[q][w - 1] = PLAYER2;
                    map[q][w] = SPACE;
                    return 1;
                }

                //如果玩家前面是机关
                else if (map[q][w - 1] == bian)
                {
                    map[q][w - 1] = PLAYER2;
                    map[q][w] = SPACE;
                    return 1;
                }

                //如果玩家前面是箱子
                else if (map[q][w - 1] == BOX)
                {

                    //如果箱子前面是墙、可操控障碍物、玩家可操控点位，那玩家就不移动
                    if (map[q][w - 2] == WALL || map[q][w - 2] == BOX)
                    {
                        return 0;
                    }

                    //如果箱子前面是坑
                    else if (map[q][w - 2] == HOLE)
                    {
                        map[q][w - 2] = OKHOLE;
                        map[q][w - 1] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是目的地
                    else if (map[q][w - 2] == GOAL)
                    {
                        map[q][w - 2] = boxANDhole;
                        map[q][w - 1] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                    //如果箱子的前面是空地
                    else if (map[q][w - 2] == SPACE)
                    {
                        map[q][w - 2] = BOX;
                        map[q][w - 1] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是填好了的坑
                    else if (map[q][w - 2] == OKHOLE)
                    {
                        map[q][w - 2] = BOX;
                        map[q][w - 1] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是机关
                    else if (map[q][w - 2] == bian)
                    {
                        map[q][w - 2] = SPACE;
                        map[q][w - 1] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }
                }

                //向右
            case 77:
                //如果玩家前面是墙、坑、玩家可操控障碍物，玩家无法向前移动
                if (map[q][w + 1] == WALL || map[q][w + 1] == HOLE || map[q][w + 1] == GOAL)
                {
                    return 0;
                }

                //如果玩家前面是空地
                else if (map[q][w + 1] == SPACE)
                {
                    map[q][w + 1] = PLAYER2;//玩家移动
                    map[q][w] = SPACE;//玩家原来的位置变为空地
                    return 1;
                }

                //如果玩家前面是填好的坑
                else if (map[q][w + 1] == OKHOLE)
                {
                    map[q][w + 1] = PLAYER2;
                    map[q][w] = SPACE;
                    return 1;
                }

                //如果玩家前面是机关
                else if (map[q][w + 1] == bian)
                {
                    map[q][w + 1] = PLAYER2;
                    map[q][w] = SPACE;
                    return 1;
                }

                //如果玩家前面是箱子
                else if (map[q][w + 1] == BOX)
                {
                    //如果箱子前面是墙、可操控障碍物、玩家可操控点位，那玩家就不移动
                    if (map[q][w + 2] == WALL || map[q][w + 2] == BOX)
                    {
                        return 0;
                    }

                    //如果箱子前面是坑
                    else if (map[q][w + 2] == HOLE)
                    {
                        map[q][w + 2] = OKHOLE;
                        map[q][w + 1] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是目的地
                    else if (map[q][w + 2] == GOAL)
                    {
                        map[q][w + 2] = boxANDhole;
                        map[q][w + 1] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                    //如果箱子的前面是空地
                    else if (map[q][w + 2] == SPACE)
                    {
                        map[q][w + 2] = BOX;
                        map[q][w + 1] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是填好了的坑
                    else if (map[q][w + 2] == OKHOLE)
                    {
                        map[q][w + 2] = BOX;
                        map[q][w + 1] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是机关
                    else if (map[q][w + 2] == bian)
                    {
                        map[q][w + 2] = SPACE;
                        map[q][w + 1] = PLAYER2;
                        map[q][w] = SPACE;
                        return 1;
                    }
                }
            }
            return 0;
        }

        else if (input == 'w' || input == 'W' || input == 's' || input == 'S' || input == 'a' || input == 'A' || input == 'd' || input == 'D')
        {
            switch (playerInPut)
            {
                // 玩家1 开始移动
                    //向上
            case 'w':
            case 'W':
                //如果玩家前面是墙、坑、玩家可操控障碍物，玩家无法向前移动
                if (map[x - 1][y] == WALL || map[x - 1][y] == HOLE || map[x - 1][y] == GOAL)
                {
                    return 0;
                }

                //如果玩家前面是空地
                else if (map[x - 1][y] == SPACE)
                {
                    map[x - 1][y] = PLAYER1;//玩家移动
                    map[x][y] = SPACE;//玩家原来的位置变为空地
                    return 1;
                }

                //如果玩家前面是填好的坑
                else if (map[x - 1][y] == OKHOLE)
                {
                    map[x - 1][y] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果玩家前面是机关
                else if (map[x - 1][y] == bian)
                {
                    map[x - 1][y] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果玩家前面是箱子
                else if (map[x - 1][y] == BOX)
                {
                    //如果箱子前面是墙、可操控障碍物、玩家可操控点位，那玩家就不移动
                    if (map[x - 2][y] == WALL || map[x - 2][y] == BOX)
                    {
                        return 0;
                    }

                    //如果箱子前面是坑
                    else if (map[x - 2][y] == HOLE)
                    {
                        map[x - 2][y] = OKHOLE;
                        map[x - 1][y] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是目的地
                    else if (map[x - 2][y] == GOAL)
                    {
                        map[x - 2][y] = boxANDhole;
                        map[x - 1][y] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }

                    //如果箱子的前面是空地
                    else if (map[x - 2][y] == SPACE)
                    {
                        map[x - 2][y] = BOX;
                        map[x - 1][y] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是填好了的坑
                    else if (map[x - 2][y] == OKHOLE)
                    {
                        map[x - 2][y] = BOX;
                        map[x - 1][y] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是机关
                    else if (map[x - 2][y] == bian)
                    {
                        map[x - 2][y] = SPACE;
                        map[x - 1][y] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }
                }

                //向下
            case 's':
            case 'S':
                //如果玩家前面是墙、坑、玩家可操控障碍物，玩家无法向前移动
                if (map[x + 1][y] == WALL || map[x + 1][y] == HOLE || map[x + 1][y] == GOAL)
                {
                    return 0;
                }

                //如果玩家前面是空地
                else if (map[x + 1][y] == SPACE)
                {
                    map[x + 1][y] = PLAYER1;//玩家移动
                    map[x][y] = SPACE;//玩家原来的位置变为空地
                    return 1;

                }

                //如果玩家前面是填好的坑
                else if (map[x + 1][y] == OKHOLE)
                {
                    map[x + 1][y] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果玩家前面是机关
                else if (map[x + 1][y] == bian)
                {
                    map[x + 1][y] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果玩家前面是箱子
                else if (map[x + 1][y] == BOX)
                {

                    //如果箱子前面是墙、可操控障碍物、玩家可操控点位，那玩家就不移动
                    if (map[x + 2][y] == WALL || map[x + 2][y] == BOX)
                    {
                        return 0;
                    }

                    //如果箱子前面是坑
                    else if (map[x + 2][y] == HOLE)
                    {
                        map[x + 2][y] = OKHOLE;
                        map[x + 1][y] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是目的地
                    else if (map[x + 2][y] == GOAL)
                    {
                        map[x + 2][y] = boxANDhole;
                        map[x + 1][y] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }

                    //如果箱子的前面是空地
                    else if (map[x + 2][y] == SPACE)
                    {
                        map[x + 2][y] = BOX;
                        map[x + 1][y] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是填好了的坑
                    else if (map[x + 2][y] == OKHOLE)
                    {
                        map[x + 2][y] = BOX;
                        map[x + 1][y] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是机关
                    else if (map[x + 2][y] == bian)
                    {
                        map[x + 2][y] = SPACE;
                        map[x + 1][y] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }
                }

                //向左
            case 'a':
            case 'A':
                //如果玩家前面是墙、坑、玩家可操控障碍物，玩家无法向前移动
                if (map[x][y - 1] == WALL || map[x][y - 1] == HOLE || map[x][y - 1] == GOAL)
                {
                    return 0;
                }

                //如果玩家前面是空地
                else if (map[x][y - 1] == SPACE)
                {
                    map[x][y - 1] = PLAYER1;//玩家移动
                    map[x][y] = SPACE;//玩家原来的位置变为空地
                    return 1;
                }

                //如果玩家前面是填好的坑
                else if (map[x][y - 1] == OKHOLE)
                {
                    map[x][y - 1] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果玩家前面是机关
                else if (map[x][y - 1] == bian)
                {
                    map[x][y - 1] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果玩家前面是箱子
                else if (map[x][y - 1] == BOX)
                {

                    //如果箱子前面是墙、可操控障碍物、玩家可操控点位，那玩家就不移动
                    if (map[x][y - 2] == WALL || map[x][y - 2] == BOX)
                    {
                        return 0;
                    }

                    //如果箱子前面是坑
                    else if (map[x][y - 2] == HOLE)
                    {
                        map[x][y - 2] = OKHOLE;
                        map[x][y - 1] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是目的地
                    else if (map[x][y - 2] == GOAL)
                    {
                        map[x][y - 2] = boxANDhole;
                        map[x][y - 1] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }

                    //如果箱子的前面是空地
                    else if (map[x][y - 2] == SPACE)
                    {
                        map[x][y - 2] = BOX;
                        map[x][y - 1] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是填好了的坑
                    else if (map[x][y - 2] == OKHOLE)
                    {
                        map[x][y - 2] = BOX;
                        map[x][y - 1] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是机关
                    else if (map[x][y - 2] == bian)
                    {
                        map[x][y - 2] = SPACE;
                        map[x][y - 1] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }
                }

                //向右
            case 'd':
            case 'D':
                //如果玩家前面是墙、坑、玩家可操控障碍物，玩家无法向前移动
                if (map[x][y + 1] == WALL || map[x][y + 1] == HOLE || map[x][y + 1] == GOAL)
                {
                    return 0;
                }

                //如果玩家前面是空地
                else if (map[x][y + 1] == SPACE)
                {
                    map[x][y + 1] = PLAYER1;//玩家移动
                    map[x][y] = SPACE;//玩家原来的位置变为空地
                    return 1;
                }

                //如果玩家前面是填好的坑
                else if (map[x][y + 1] == OKHOLE)
                {
                    map[x][y + 1] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果玩家前面是机关
                else if (map[x][y + 1] == bian)
                {
                    map[x][y + 1] = PLAYER1;
                    map[x][y] = SPACE;
                    return 1;
                }

                //如果玩家前面是箱子
                else if (map[x][y + 1] == BOX)
                {
                    //如果箱子前面是墙、可操控障碍物、玩家可操控点位，那玩家就不移动
                    if (map[x][y + 2] == WALL || map[x][y + 2] == BOX)
                    {
                        return 0;
                    }

                    //如果箱子前面是坑
                    else if (map[x][y + 2] == HOLE)
                    {
                        map[x][y + 2] = OKHOLE;
                        map[x][y + 1] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是目的地
                    else if (map[x][y + 2] == GOAL)
                    {
                        map[x][y + 2] = boxANDhole;
                        map[x][y + 1] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }

                    //如果箱子的前面是空地
                    else if (map[x][y + 2] == SPACE)
                    {
                        map[x][y + 2] = BOX;
                        map[x][y + 1] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是填好了的坑
                    else if (map[x][y + 2] == OKHOLE)
                    {
                        map[x][y + 2] = BOX;
                        map[x][y + 1] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }

                    //如果箱子前面是机关
                    else if (map[x][y + 2] == bian)
                    {
                        map[x][y + 2] = SPACE;
                        map[x][y + 1] = PLAYER1;
                        map[x][y] = SPACE;
                        return 1;
                    }
                }
            }
        }
        return 0;
    }
}


int isWin()
{
    if (level1 < 3)
    {
        for (int i = 0; i < 15; i++)
        {
            for (int j = 0; j < 15; j++)
            {
                if (map[i][j] == GOAL)
                {
                    return 0; // 如果发现任何终点字符，游戏未胜利  
                }
            }
        }
    }

    else if (level2 < 3)
    {
        for (int i = 0; i < 15; i++)
        {
            for (int j = 0; j < 15; j++)
            {
                if (map[i][j] == GOAL)
                {
                    return 0; // 如果发现任何终点字符，游戏未胜利  
                }
            }
        }
    }
    return 1;
}
